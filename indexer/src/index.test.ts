import { expect, describe, it, beforeEach, vi } from 'vitest'
import type { MockPg } from '#mocks'

const PRODUCT = {
  title: "Test product",
  description: "Product description",
  image: "https://example.com/product-image.jpg"
}
const OFFER = {
  seller: "Test Seller",
  price: 70,
  curency: "EUR",
}
const BRAND = {
  name: "Test",
  logo: "https://example.com/brand.jpg",
}
const PAGE = {
  id: "test_id",
  url: "https://example.com/product",
  site: "site-id",
}

const fullPage = (ld: object) => ({
  ...PAGE,
  body: `
    <html>
      <head>
        <script type="application/ld+json">
        ${JSON.stringify({
          "@context": "https://schema.org/",
          ...ld,
        })}
        </script>
      </head>
    </html>
  `,
})

describe('indexer', () => {
  let pg: MockPg
  beforeEach(async () => {
    vi.resetModules()

    const { MockPg } = await import('#mocks')
    pg = MockPg()
  })

  it("extracts product and offer", async () => {
    const page = fullPage({
      "@type": "Product",
      "name": PRODUCT.title,
      "description": PRODUCT.description,
      "image": PRODUCT.image,
    })
    pg.query.mockResolvedValueOnce({ rows: [page] }) 

    await import('./index.js')

    expect(pg).toHaveInserted('products', [PRODUCT.title, PRODUCT.description, PRODUCT.image])
    expect(pg).toHaveInserted('offers', [PAGE.site, PAGE.url])
  })

  it("extracts offer details", async () => {
    const page = fullPage({
      "@type": "Product",
      "name": PRODUCT.title,
      "offers": {
        "@type": "Offer",
        "url": "https://example.com/offer",
        "price": OFFER.price,
        "priceCurrency": OFFER.curency,
        "seller": {
          "@type": "Organization",
          "name": OFFER.seller,
        }
      }
    })
    pg.query.mockResolvedValueOnce({ rows: [page] }) 

    await import('./index.js')

    expect(pg).toHaveInserted('sellers', [OFFER.seller])
    expect(pg).toHaveInserted('offers', [PAGE.site, PAGE.url, OFFER.price, OFFER.curency])
  })

  it("does not re-insert existing seller", async () => {
    const page = fullPage({
      "@type": "Product",
      "name": PRODUCT.title,
      "offers": {
        "@type": "Offer",
        "seller": {
          "@type": "Organization",
          "name": OFFER.seller,
        }
      }
    })
    pg.query.mockResolvedValueOnce({ rows: [page] }) 
    pg.query.mockResolvedValueOnce({ rows: [{ name: OFFER.seller }] }) 

    await import('./index.js')

    expect(pg).not.toHaveInserted('sellers', [OFFER.seller])
  })

  it("extracts product brand", async () => {
    const page = fullPage({
      "@type": "Product",
      "name": PRODUCT.title,
      "brand": {
        "@type": "Brand",
        "name": BRAND.name,
        "image": BRAND.logo,
      },
    })
    pg.query.mockResolvedValueOnce({ rows: [page] }) 

    await import('./index.js')

    expect(pg).toHaveInserted('products', [BRAND.name])
    expect(pg).toHaveInserted('brands', [BRAND.name, BRAND.logo])
  })

  it("does not re-insert existing brand", async () => {
    const page = fullPage({
      "@type": "Product",
      "name": PRODUCT.title,
      "brand": {
        "@type": "Brand",
        "name": BRAND.name,
        "image": BRAND.logo,
      },
    })
    pg.query.mockResolvedValueOnce({ rows: [page] }) 
    pg.query.mockResolvedValueOnce({ rows: [BRAND] }) 

    await import('./index.js')

    expect(pg).not.toHaveInserted('brands', [])
  })

  it("generates embedding for product", async () => {
    const EMBEDDING = [
			  -0.03646936,
			  0.0050474,
			  -0.02476855,
			  -0.02275801,
			  0.04865471,
			  -0.01648343,
			  0.11311775,
			  0.0756732,
			  -0.0162061,
			  -0.02784625,
			  0.05845852,
			  -0.04573055,
			  0.02522398,
			  0.03556795,
			  -0.0094847,
			  -0.00331817,
			  0.04162702,
			  0.0112962,
			  -0.07304241,
			  -0.03754292,
			  0.02512432,
			  -0.04515887,
			  0.01515956,
			  0.07201935,
			  -0.07230935,
			  0.0440157,
			  -0.0042103,
			  -0.02153088,
			  0.04012401,
			  -0.07771352,
			  0.04989322,
			  -0.00767493,
			  -0.00440011,
			  0.00349485,
			  0.07867102,
			  -0.02599138,
			  0.00671603,
			  -0.00442598,
			  -0.03546691,
			  0.02423492,
			  0.03217802,
			  -0.13978314,
			  -0.03113869,
			  0.01921059,
			  0.01187606,
			  0.00805925,
			  0.03416482,
			  0.07609215,
			  0.01335767,
			  0.01193211,
			  -0.05078683,
			  -0.03997616,
			  -0.08221587,
			  -0.04798498,
			  -0.05305677,
			  -0.05553453,
			  0.01276216,
			  -0.03099108,
			  0.0129219,
			  0.05049544,
			  0.0352634,
			  -0.07891973,
			  -0.0404474,
			  0.05083705,
			  0.04417421,
			  0.00450913,
			  -0.01255088,
			  -0.03554432,
			  -0.05494195,
			  -0.02496091,
			  -0.02150707,
			  -0.00344746,
			  -0.00575678,
			  0.06476223,
			  0.02712243,
			  0.04219644,
			  0.0080915,
			  -0.1211637,
			  0.07021172,
			  -0.00750264,
			  -0.08357884,
			  -0.05576448,
			  -0.04164335,
			  0.06180762,
			  0.05662966,
			  0.10291767,
			  0.06725727,
			  0.03971945,
			  -0.06035988,
			  -0.00794866,
			  0.00922511,
			  0.0540874,
			  -0.03894524,
			  -0.01515232,
			  -0.06093684,
			  0.02148501,
			  0.03004925,
			  -0.06547084,
			  0.05389813,
			  0.16600417,
			  0.01475436,
			  -0.03835044,
			  0.0097198,
			  -0.08955301,
			  -0.11394317,
			  -0.03830903,
			  -0.00494687,
			  -0.08647606,
			  0.11883248,
			  0.08197433,
			  -0.0671268,
			  -0.01949314,
			  -0.03238522,
			  0.0539141,
			  -0.02551793,
			  -0.04290759,
			  -0.06805374,
			  0.02355864,
			  -0.06359977,
			  -0.01117835,
			  0.07359453,
			  0.02692162,
			  0.05406733,
			  -0.02037576,
			  -0.00599676,
			  0.04961689,
			  0.08173114,
			  -0,
			  -0.04643067,
			  -0.0666255,
			  0.05143131,
			  0.08972503,
			  -0.05603532,
			  0.05784251,
			  -0.00296522,
			  0.08167396,
			  -0.00732137,
			  0.04849614,
			  -0.00502106,
			  -0.00168551,
			  -0.01525753,
			  0.04409977,
			  0.06540972,
			  0.0782842,
			  -0.00516472,
			  -0.00757149,
			  0.00686425,
			  0.00805091,
			  -0.03836844,
			  -0.0481447,
			  -0.01219591,
			  0.01902613,
			  -0.04722776,
			  -0.07971115,
			  -0.0002952,
			  0.02141962,
			  0.01454382,
			  0.01048083,
			  -0.02242897,
			  0.0139407,
			  -0.06848571,
			  -0.0050953,
			  -0.06376932,
			  0.04951024,
			  -0.0309526,
			  -0.06535278,
			  0.0368955,
			  0.03833254,
			  -0.00901022,
			  -0.03534055,
			  0.0569381,
			  0.05084975,
			  0.04234225,
			  -0.04945897,
			  -0.0599261,
			  -0.01945691,
			  0.05469682,
			  0.00510945,
			  -0.05398189,
			  0.03901567,
			  -0.00079188,
			  -0.05916249,
			  -0.04784892,
			  0.01094204,
			  -0.01611837,
			  -0.03981221,
			  0.05203749,
			  0.09189212,
			  -0.06758386,
			  0.08719968,
			  0.00607798,
			  0.04718934,
			  -0.10767634,
			  -0.00210164,
			  -0.00033684,
			  -0.10018099,
			  0.04300148,
			  0.06314243,
			  -0.00059503,
			  -0.00956524,
			  0.0392282,
			  -0.01297267,
			  -0.00320907,
			  -0.04399234,
			  0.00612494,
			  0.07273228,
			  -0.01948182,
			  -0.06056996,
			  0.07370141,
			  -0.0580071,
			  0.01511834,
			  -0.00203972,
			  -0.04275864,
			  -0.03768909,
			  -0.06900863,
			  -0.06876305,
			  -0.02562501,
			  -0.03521537,
			  0.00894877,
			  0.03426872,
			  -0.04337776,
			  0.03200386,
			  0.07072197,
			  0,
			  -0.06521512,
			  -0.01338138,
			  0.01916549,
			  0.08542518,
			  0.09342751,
			  -0.03928591,
			  0.05004523,
			  -0.06243828,
			  -0.02104878,
			  0.10981565,
			  0.06972208,
			  -0.05794931,
			  0.03075554,
			  0.00083811,
			  -0.06906922,
			  0.10400422,
			  0.04502595,
			  -0.04496989,
			  0.04146326,
			  -0.05134812,
			  -0.04916518,
			  0.11167267,
			  0.02436456,
			  -0.04166703,
			  -0.11037943,
			  0.00443805,
			  0.05623641,
			  -0.02447468,
			  0.04057372,
			  -0.00271888,
			  0.05812839,
			  -0.01734684,
			  -0.03639461,
			  0.08254179,
			  0.0242206,
			  -0.04256281,
			  0.14417732,
			  -0.07035165,
			  0.01745467,
			  -0.00957721,
			  0.09502153,
			  0.03850825,
			  0.00700433,
			  0.04389525,
			  -0.00119328,
			  0.01079274,
			  0.06053596,
			  -0.08666454,
			  0.082849,
			  0.04320536,
			  -0.02190682,
			  0.0618661,
			  0.00535727,
			  -0.05271532,
			  -0.06449482,
			  0.02460366,
			  -0.01240261,
			  -0.02202508,
			  -0.03473009,
			  0.04020017,
			  -0.05909769,
			  0.07725778,
			  0.0014239,
			  0.04135141,
			  -0.01255123,
			  -0.04385279,
			  0.03836005,
			  0.06033158,
			  0.05804975,
			  0.01412017,
			  0.03093505,
			  0.06861859,
			  -0.00844431,
			  -0.05183481,
			  0.0101282,
			  -0.01670624,
			  -0.08319953,
			  -0.03146907,
			  0.02120391,
			  -0.06158379,
			  -0.00843766,
			  -0.07854885,
			  -0.03827338,
			  0.04093885,
			  -0.03251391,
			  0.02400224,
			  0.04071897,
			  0.02512702,
			  -0.03243428,
			  0.04235866,
			  0.01937058,
			  0.05517183,
			  -0.08110809,
			  0.01413764,
			  0.04557602,
			  -1e-8,
			  -0.00503506,
			  -0.09124628,
			  0.07909518,
			  0.02263906,
			  -0.05826493,
			  -0.00144032,
			  -0.03942093,
			  -0.01799833,
			  -0.0136199,
			  -0.00286337,
			  0.02245815,
			  0.01963958,
			  -0.07365951,
			  0.08190847,
			  0.03687301,
			  -0.04550603,
			  -0.06571224,
			  0.02055657,
			  -0.0217907,
			  0.0086289,
			  -0.0078681,
			  0.08175781,
			  0.09163357,
			  0.03873853,
			  -0.09850236,
			  0.02777284,
			  0.07438346,
			  0.07587647,
			  0.00588038,
			  -0.02487347,
			  0.05767668,
			  0.02670236,
			  -0.0103503,
			  -0.06571452,
			  0.04323192,
			  -0.0195677,
			  0.01010722,
			  0.06050948,
			  0.00601317,
			  0.07978558,
			  -0.10404336,
			  -0.04571402,
			  -0.02785713,
			  -0.02020224,
			  -0.00979801,
			  -0.0592045,
			  -0.07381666,
			  -0.10949185,
			  -0.05248461,
			  -0.04146829,
			  0.00783205,
			  -0.0008569,
			  0.00705941,
			  -0.05129005,
			  -0.02319796,
			  0.02417922,
			  0.02681009,
			  -0.05158698,
			  -0.07698128,
			  0.0167763,
			  0.08511925,
			  -0.01526671,
			  0.10052256,
			  -0.00035524,
			]
    const page = fullPage({
      "@type": "Product",
      "name": PRODUCT.title,
    })
    pg.query.mockResolvedValueOnce({ rows: [page] }) 

    await import('./index.js')

    expect(pg).toHaveInserted('products', [PRODUCT.title, EMBEDDING])
  })
})
